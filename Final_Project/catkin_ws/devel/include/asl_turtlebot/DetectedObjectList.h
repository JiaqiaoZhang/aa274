// Generated by gencpp from file asl_turtlebot/DetectedObjectList.msg
// DO NOT EDIT!


#ifndef ASL_TURTLEBOT_MESSAGE_DETECTEDOBJECTLIST_H
#define ASL_TURTLEBOT_MESSAGE_DETECTEDOBJECTLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <asl_turtlebot/DetectedObject.h>

namespace asl_turtlebot
{
template <class ContainerAllocator>
struct DetectedObjectList_
{
  typedef DetectedObjectList_<ContainerAllocator> Type;

  DetectedObjectList_()
    : objects()
    , ob_msgs()  {
    }
  DetectedObjectList_(const ContainerAllocator& _alloc)
    : objects(_alloc)
    , ob_msgs(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _objects_type;
  _objects_type objects;

   typedef std::vector< ::asl_turtlebot::DetectedObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::asl_turtlebot::DetectedObject_<ContainerAllocator> >::other >  _ob_msgs_type;
  _ob_msgs_type ob_msgs;





  typedef boost::shared_ptr< ::asl_turtlebot::DetectedObjectList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::asl_turtlebot::DetectedObjectList_<ContainerAllocator> const> ConstPtr;

}; // struct DetectedObjectList_

typedef ::asl_turtlebot::DetectedObjectList_<std::allocator<void> > DetectedObjectList;

typedef boost::shared_ptr< ::asl_turtlebot::DetectedObjectList > DetectedObjectListPtr;
typedef boost::shared_ptr< ::asl_turtlebot::DetectedObjectList const> DetectedObjectListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::asl_turtlebot::DetectedObjectList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::asl_turtlebot::DetectedObjectList_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace asl_turtlebot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'asl_turtlebot': ['/home/aa274/catkin_ws/src/asl_turtlebot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::asl_turtlebot::DetectedObjectList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::asl_turtlebot::DetectedObjectList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asl_turtlebot::DetectedObjectList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::asl_turtlebot::DetectedObjectList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asl_turtlebot::DetectedObjectList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::asl_turtlebot::DetectedObjectList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::asl_turtlebot::DetectedObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b55ad56e2dd8e9c68837a2cd0b12032a";
  }

  static const char* value(const ::asl_turtlebot::DetectedObjectList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb55ad56e2dd8e9c6ULL;
  static const uint64_t static_value2 = 0x8837a2cd0b12032aULL;
};

template<class ContainerAllocator>
struct DataType< ::asl_turtlebot::DetectedObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "asl_turtlebot/DetectedObjectList";
  }

  static const char* value(const ::asl_turtlebot::DetectedObjectList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::asl_turtlebot::DetectedObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] objects\n\
DetectedObject[] ob_msgs\n\
================================================================================\n\
MSG: asl_turtlebot/DetectedObject\n\
uint32 id\n\
string name\n\
float64 confidence\n\
float64 distance\n\
float64 thetaleft\n\
float64 thetaright\n\
float64[] corners\n\
";
  }

  static const char* value(const ::asl_turtlebot::DetectedObjectList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::asl_turtlebot::DetectedObjectList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.objects);
      stream.next(m.ob_msgs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectedObjectList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::asl_turtlebot::DetectedObjectList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::asl_turtlebot::DetectedObjectList_<ContainerAllocator>& v)
  {
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.objects[i]);
    }
    s << indent << "ob_msgs[]" << std::endl;
    for (size_t i = 0; i < v.ob_msgs.size(); ++i)
    {
      s << indent << "  ob_msgs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::asl_turtlebot::DetectedObject_<ContainerAllocator> >::stream(s, indent + "    ", v.ob_msgs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASL_TURTLEBOT_MESSAGE_DETECTEDOBJECTLIST_H
